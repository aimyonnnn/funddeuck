<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.itwillbs.test.mapper.BankMapper">
	<!-- 토큰 정보 저장 -->
	<insert id="insertToken" useGeneratedKeys="true" keyProperty="token.token_idx">
		INSERT
			INTO token
			VALUES (
				NULL
				, #{member_idx}
				, #{token.access_token}
				, #{token.token_type}
				, #{token.expires_in}
				, #{token.refresh_token}
				, #{token.scope}
				, #{token.user_seq_no}
			);
	</insert>
	
	<!-- 토큰 정보 조회 -->
	<select id="selectToken" resultType="com.itwillbs.test.vo.ResponseTokenVO">
		SELECT * 
			FROM token
				WHERE member_idx = #{member_idx}
			
	</select>
	
	<!-- 토큰 정보 업데이트 -->
	<update id="updateToken" parameterType="map">
		UPDATE token
		SET
			access_token = #{token.access_token},
			token_type = #{token.token_type},
			expires_in = #{token.expires_in},
			refresh_token = #{token.refresh_token},
			scope = #{token.scope},
			user_seq_no = #{token.user_seq_no} 
		WHERE 
			member_idx = #{member_idx} 
	</update>
	
	<!-- 토큰 삭제 -->
	<delete id="deleteToken">
		DELETE FROM token
			WHERE member_idx = #{member_idx}
	</delete>
	
	<!-- 계좌 정보 저장 -->
	<insert id="insertBankAccount">
		INSERT 
			INTO bankAccount
			VALUES (
				NULL
				, #{member_idx}
				, #{bankAccount.fintech_use_num}
				, #{bankAccount.account_holder_name}
				, #{bankAccount.bank_name}
				, #{bankAccount.account_num_masked}
			)
	
	</insert>	
	
	<!-- 계좌 정보 조회 -->
	<select id="selectBankAccountInfo" resultType="com.itwillbs.test.vo.BankAccountVO">
		SELECT *
			FROM bankAccount
				WHERE member_idx = #{member_idx}
	</select>
	
	<!-- 중복된 계좌 정보 조회(핀테크이용번호 일치 여부 확인) -->
	<select id="selectBankAccount" resultType="com.itwillbs.test.vo.BankAccountVO">
		SELECT *
			FROM bankAccount
				WHERE member_idx = #{member_idx}
					AND fintech_use_num = #{bankAccount.fintech_use_num}
	</select>
	
	<!-- 계좌변경시 등록된 계좌정보 삭제 -->
	<delete id="deleteBankAccount">
		DELETE FROM bankAccount
			WHERE member_idx = #{member_idx}
	</delete>
	
	<!-- 정산 내역 등록 -->
	<insert id="insertDepositSettlement" parameterType="map">
	    INSERT INTO banking (
	        member_id,
	        project_idx,
	        banking_bank_name,
	        banking_account_num_masked,
	        banking_bank_tran_date,
	        banking_account_holder_name,
	        banking_tran_amt,
	        banking_print_content,
	        banking_status
	    )
	    VALUES
	    <foreach collection="paramMap.depositInfoList" item="item" separator=",">
	        (
	            #{member_id},
	            #{project_idx},
	            #{item.bank_name},
	            #{item.account_num_masked},
	            CURDATE(),
	            #{item.account_holder_name},
	            #{item.tran_amt},
	            #{item.print_content},
	            4
	        )
	    </foreach>
	</insert>
	
	<!-- 환불 내역 등록 -->
	<insert id="insertDepositRefund" parameterType="map">
	    INSERT INTO banking (
	        member_id,
	        project_idx,
	        banking_bank_name,
	        banking_account_num_masked,
	        banking_bank_tran_date,
	        banking_account_holder_name,
	        banking_tran_amt,
	        banking_print_content,
	        banking_status
	    )
	    VALUES
	    <foreach collection="paramMap.depositInfoList" item="item" separator=",">
	        (
	            #{member_id},
	            #{project_idx},
	            #{item.bank_name},
	            #{item.account_num_masked},
	            CURDATE(),
	            #{item.account_holder_name},
	            #{item.tran_amt},
	            #{item.print_content},
	            3
	        )
	    </foreach>
	</insert>
	
	<!-- 펀딩결제시(계좌) 입금내역 등록 -->
	<insert id="insertFundingTranHist">
		INSERT INTO banking
			VALUES (
				NULL
	            , #{member_id}
	            , #{project_idx}
	            , #{withdrawResult.bank_name}
	            , #{withdrawResult.account_num_masked}
	            , CURDATE() -- 현재날짜
	            , #{withdrawResult.account_holder_name}
	            , #{withdrawResult.tran_amt}
	            , #{withdrawResult.dps_print_content} -- 인자내역(테스트데이터인자내역)
	            , 1
			)
		
	</insert>
	
	<!-- 정산 목록 조회 요청 -->
	<select id="selectAllSettlementBanking">
		SELECT *
			FROM banking b
			JOIN project p 
			ON b.project_idx = p.project_idx
		WHERE 1 = 1
		<!-- 검색타입이 널스트링이 아닐 때 -->
		<if test="!searchKeyword.equals('')">
			<!-- 검색타입에 따른 where절 조건 대상 변경 -->
			<choose>
				<when test="searchType.equals('subject')">
					AND p.project_subject LIKE '%${searchKeyword}%'
				</when>
				<when test="searchType.equals('name')">
					AND p.project_representative_name LIKE '%${searchKeyword}%'
				</when>					
			</choose>
		</if>
			AND b.banking_status = 4
		ORDER BY
			b.banking_bank_tran_date DESC, b.banking_idx DESC
		LIMIT
			#{startRow}
			, #{listLimit}
	</select>
	
	<!-- 정산 목록 개수 조회 요청 -->
	<select id="selectAllSettlementBankingCount">
		SELECT count(*)
			FROM
				banking
			WHERE
				banking_status = 4
	</select>
	
	<!-- 이번 달 정산금액 조회 요청 -->
	<select id="selectMonthAmount" resultType="int">
		SELECT SUM(banking_tran_amt) as total
		    FROM banking
		    WHERE MONTH(banking_bank_tran_date) = MONTH(CURRENT_DATE())
		    AND YEAR(banking_bank_tran_date) = YEAR(CURRENT_DATE())
		    AND banking_status = 4
	</select>

</mapper>
